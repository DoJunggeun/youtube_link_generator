{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onSubmit","data","inputURL","document","getElementById","value","min","sec","isEmpty","alert","listcode","includes","slice","indexOf","start","protocol","urltype","url","isYoutubeURL","isNumber","videoCode","_url","end","getVideoCode","result","t","createElement","body","appendChild","select","execCommand","removeChild","thumbnailURL","src","setTimeout","copyToClipboard","val","parseInt","undefined","react_default","a","className","id","type","size","placeholder","minLength","maxLength","onClick","readOnly","alt","window","location","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02f21709.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n    // const [loaded, setLoaded] = useState(false);\n    // function autoPasteVaildURL() {\n    //     alert('hi');\n    //     // if (window.confirm('클립보드의 텍스트를 붙여넣을래?'))\n    //     let t = document.createElement('textarea');\n    //     t.focus();\n    //     document.execCommand('paste');\n    //     console.log(t);\n    //     console.log(t.textContent);\n    //     // }\n    // }\n\n    // useEffect(() => {\n    //     document.addEventListener('click', autoPasteVaildURL, { once: true });\n    // }, []);\n\n    function onSubmit() {\n        let data;\n        let inputURL = document.getElementById('originallink').value;\n        let min = document.getElementById('min');\n        let sec = document.getElementById('sec');\n\n        if (isEmpty(inputURL)) {\n            alert('enter your URL');\n            return;\n        } else {\n            data = isYoutubeURL(inputURL);\n            if (data === false) {\n                alert('check your URL.\\nyour URL may not a YouTube video');\n                return;\n            }\n        }\n        if (!isNumber(min.value)) {\n            alert(min.value + ' is not a integer'); return;\n        } else if (!isNumber(sec.value)) {\n            alert(sec.value + ' is not a integer'); return;\n        } else if (sec.value >= 60) {\n            alert('sec must be smaller than 60'); return;\n        }\n        if (isEmpty(min.value)) min.value = 0;\n        if (isEmpty(sec.value)) sec.value = 0;\n        copyToClipboard(data, min.value, sec.value);\n    }\n\n    function copyToClipboard(data, min, sec) {\n\t\tlet videoCode = getVideoCode(data);\n        let result = 'https://youtu.be/'+videoCode+'?t=' + (60 * min + 1 * sec);\n\t\t// https://youtu.be/cxNIewNXpcg?list=RDcxNIewNXpcg\n        if (min == 0 && sec == 0) {\n            result = 'https://youtu.be/'+videoCode;\n        } else {\n            result = 'https://youtu.be/'+videoCode+'?t=' + (60 * min + 1 * sec);\n        }\n        let t = document.createElement('textarea');\n        document.body.appendChild(t);\n        t.value = result;\n        t.select();\n        document.execCommand('copy');\n        document.getElementById('result').value = result;\n        document.body.removeChild(t);\n        let thumbnailURL = 'https://i.ytimg.com/vi/' + videoCode + '/maxresdefault.jpg';\n        document.getElementById('thumbnail').src = thumbnailURL;\n\t\tsetTimeout(() => alert('URL copied!'),300)\n    }\n    // https://i.ytimg.com/vi/M03hNLFsRKY/maxresdefault.jpg (maxresdefault, sddefault, 0)\n    // https://www.youtube.com/watch?v=8Wtvn2LBQHM&feature=youtu.be\n    // https://youtu.be/8Wtvn2LBQHM\n\n    function getVideoCode(data) {\n        let _url = data.url;\n        let urltype = data.urltype;\n        if (urltype === 'shortURL') {\n            return _url.slice(9);\n        }\n        if (urltype === 'fullURL') {\n            let start = _url.indexOf('v=') + 2;\n            let end = start + 11;\n            return _url.slice(start, end);\n        }\n    }\n\n    function isYoutubeURL(inputURL) {\n\t\tlet listcode = null;\n        if (inputURL.includes('?t=')) {\n            inputURL = inputURL.slice(0, inputURL.indexOf('?t='));\n        }\n        if (inputURL.includes('?list=')) {\n\t\t\tlet start = inputURL.indexOf('?list=')+6\n            listcode = inputURL.slice(start,start+13);\n        }\n        if (inputURL.slice(8, 16) === 'youtu.be') {\n            return { protocol: 'https', urltype: 'shortURL', url: inputURL.slice(8), listcode };\n        } else if (inputURL.slice(7, 15) === 'youtu.be') {\n            return { protocol: 'http', urltype: 'shortURL', url: inputURL.slice(7), listcode };\n        } else if (inputURL.slice(0, 8) === 'youtu.be') {\n            return { protocol: null, urltype: 'shortURL', url: inputURL, listcode };\n        } else if (inputURL.slice(0, 15) === 'www.youtube.com') {\n            return { protocol: null, urltype: 'fullURL', url: inputURL.slice(4), listcode };\n        } else if (inputURL.slice(7, 22) === 'www.youtube.com') {\n            return { protocol: 'http', urltype: 'fullURL', url: inputURL.slice(11), listcode };\n        } else if (inputURL.slice(8, 23) === 'www.youtube.com') {\n            return { protocol: 'https', urltype: 'fullURL', url: inputURL.slice(12), listcode };\n        } else if (inputURL.slice(0, 11) === 'youtube.com') {\n            return { urltype: 'fullURL', url: inputURL };\n        } else return false;\n    }\n\n    function isNumber(val) {\n        if (val == parseInt(val)) return true;\n        else return false;\n    }\n\n    function isEmpty(val) {\n        if (val == null || val == '' || val == undefined) return true;\n        else return false;\n    }\n\t\n\tfunction share(){\n        let t = document.createElement('textarea');\n        document.body.appendChild(t);\n        t.value = window.location;\n        t.select();\n        document.execCommand('copy');\n        document.body.removeChild(t);\n\t\tsetTimeout(() => alert('URL copied!'),300)\n\t}\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Youtube specific time URL Generator</h1>\n                <div className=\"main\">\n                    <input id=\"originallink\" type=\"text\" size=\"30\" placeholder=\"link\" />\n\t\t\t\t\t<div className=\"inputs\">\n                    <input\n                        id=\"min\"\n                        type=\"text\"\n                        minLength=\"1\"\n                        maxLength=\"4\"\n                        size=\"3\"\n                        placeholder=\"min\"\n                    />\n                    <input\n                        id=\"sec\"\n                        type=\"text\"\n                        minLength=\"1\"\n                        maxLength=\"2\"\n                        size=\"3\"\n                        placeholder=\"sec\"\n                    />\n\t\t\t\t\t\t<button onClick={() => onSubmit()}>submit</button>\n\t\t\t\t\t</div>\n                \n                <input id=\"result\" type=\"text\" size=\"45\" placeholder=\"result\" readOnly/>\n                <img id=\"thumbnail\" alt=\"\"></img>\n                </div>\n            </header>\n\t\t\t<button onClick={() => share()}>share this page</button>\n        </div>\n    );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}