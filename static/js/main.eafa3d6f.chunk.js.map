{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","autoPasteVaildURL","alert","t","document","createElement","focus","execCommand","console","log","textContent","copyToClipboard","isYoutubeURL","result","url","getElementById","value","body","appendChild","select","removeChild","src","urltype","protocol","slice","start","indexOf","getThumbnailCode","originallink","includes","useEffect","addEventListener","once","react_default","a","className","id","type","size","placeholder","required","minLength","maxLength","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eafa3d6f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n    const [loaded, setLoaded] = useState(false);\n    function autoPasteVaildURL() {\n\t\talert('hi')\n\t// if (window.confirm('클립보드의 텍스트를 붙여넣을래?')) \n        let t = document.createElement('textarea');\n\t\tt.focus();\n\t\tdocument.execCommand('paste');\n\t\tconsole.log(t)\n\t\tconsole.log(t.textContent)\n\t// }\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"click\", autoPasteVaildURL, {once:true})\n    }, []);\n\n    function copyToClipboard() {\n        if (isYoutubeURL() === false) {\n            alert('your URL is not a YouTube video');\n        } else {\n            let url = isYoutubeURL().url;\n            let min = document.getElementById('min').value;\n            let sec = document.getElementById('sec').value;\n            let result = url + '?t=' + (60 * min + 1 * sec);\n            let t = document.createElement('textarea');\n            document.body.appendChild(t);\n            t.value = result;\n            t.select();\n            document.execCommand('copy');\n            document.getElementById('result').value = result;\n            document.body.removeChild(t);\n            document.getElementById('thumbnail').src =\n                'https://i.ytimg.com/vi/' + getThumbnailCode() + '/maxresdefault.jpg';\n        }\n    }\n    // https://i.ytimg.com/vi/M03hNLFsRKY/maxresdefault.jpg\n    // https://www.youtube.com/watch?v=8Wtvn2LBQHM&feature=youtu.be\n    // https://youtu.be/8Wtvn2LBQHM\n\n    function getThumbnailCode() {\n        if (isYoutubeURL() === false) return null;\n        let url = isYoutubeURL().url;\n        let urltype = isYoutubeURL().urltype;\n        let protocol = isYoutubeURL().protocol;\n        if (urltype === 'shortURL') {\n            if (protocol === 'https') return url.slice(17);\n            else if (protocol === 'http') return url.slice(16);\n            else if (protocol === null) return url.slice(9);\n        }\n        if (urltype === 'fullURL') {\n            let start = url.indexOf('v=') + 2;\n            let end = url.indexOf('&');\n\n            return url.slice(start, start + 11);\n        }\n    }\n\n    function isYoutubeURL() {\n        let originallink = document.getElementById('originallink').value;\n        if (originallink.includes('?t=')) {\n            originallink = originallink.slice(0, originallink.indexOf('?t='));\n        }\n        if (originallink.slice(8, 16) === 'youtu.be') {\n            return { protocol: 'https', urltype: 'shortURL', url: originallink };\n        } else if (originallink.slice(7, 15) === 'youtu.be') {\n            return { protocol: 'http', urltype: 'shortURL', url: originallink };\n        } else if (originallink.slice(0, 8) === 'youtu.be') {\n            return { protocol: null, urltype: 'shortURL', url: originallink };\n        } else if (originallink.slice(0, 15) === 'www.youtube.com') {\n            return { protocol: null, urltype: 'fullURL', url: originallink };\n        } else if (originallink.slice(7, 22) === 'www.youtube.com') {\n            return { protocol: 'http', urltype: 'fullURL', url: originallink };\n        } else if (originallink.slice(8, 23) === 'www.youtube.com') {\n            return { protocol: 'https', urltype: 'fullURL', url: originallink };\n        } else return false;\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Youtube specific time URL Generator</h1>\n                <div className=\"main\">\n                    <input id=\"originallink\" type=\"text\" size=\"30\" placeholder=\"link\" required />\n                    <br />\n                    <input\n                        id=\"min\"\n                        type=\"text\"\n                        minLength=\"1\"\n                        maxLength=\"4\"\n                        size=\"14\"\n                        placeholder=\"min\"\n                        required\n                    />\n                    <input\n                        id=\"sec\"\n                        type=\"text\"\n                        minLength=\"1\"\n                        maxLength=\"2\"\n                        size=\"14\"\n                        placeholder=\"sec\"\n                        required\n                    />\n                </div>\n                <br />\n                <button onClick={() => copyToClipboard()}>submit</button>\n                <input id=\"result\" type=\"text\" size=\"30\" placeholder=\"result\" />\n                <img id=\"thumbnail\"></img>\n            </header>\n        </div>\n    );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}