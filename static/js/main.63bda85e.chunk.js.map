{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","copyToClipboard","result","document","getElementById","value","t","createElement","body","appendChild","select","execCommand","removeChild","src","originallink","slice","start","indexOf","end","getThumbnailCode","react_default","a","className","id","type","size","placeholder","required","minLength","maxLength","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wJCkFzBC,MA9Ef,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAAK,GAAAH,EAAA,GAAAA,EAAA,GAEWD,mBAAS,KAFpBK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAAAE,GAAAD,EAAA,GAAAA,EAAA,GAGWL,mBAAS,KAHpBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAaX,SAASE,IACL,IAGIC,EAHeC,SAASC,eAAe,gBAAgBC,MAG/B,OAAS,GAF3BF,SAASC,eAAe,OAAOC,MAEO,EADtCF,SAASC,eAAe,OAAOC,OAErCC,EAAIH,SAASI,cAAc,YAC/BJ,SAASK,KAAKC,YAAYH,GAC1BA,EAAED,MAAQH,EACVI,EAAEI,SACFP,SAASQ,YAAY,QACrBR,SAASC,eAAe,UAAUC,MAAQH,EAC1CC,SAASK,KAAKI,YAAYN,GAChCH,SAASC,eAAe,aAAaS,IAAM,0BAM5C,WACO,IAAIC,EAAeX,SAASC,eAAe,gBAAgBC,MACjE,GAAgC,YAA5BS,EAAaC,MAAM,EAAE,IACxB,OAAOD,EAAaC,MAAM,IAE3B,GAAiC,mBAA5BD,EAAaC,MAAM,EAAE,IAA2B,CACpD,IAAIC,EAAQF,EAAaG,QAAQ,MAAM,EACnCC,EAAMJ,EAAaG,QAAQ,KAC/B,OAAOH,EAAaC,MAAMC,EAAME,IAdqCC,GAAoB,qBAkBxF,OA3CWnB,EAAA,GAAAA,EAAA,GA4CPoB,EAAAC,EAAAd,cAAA,OAAKe,UAAU,OACXF,EAAAC,EAAAd,cAAA,UAAQe,UAAU,cACdF,EAAAC,EAAAd,cAAA,iDACAa,EAAAC,EAAAd,cAAA,OAAKe,UAAU,QACXF,EAAAC,EAAAd,cAAA,SAAOgB,GAAG,eAAeC,KAAK,OAAOC,KAAK,KAAKC,YAAY,OAAOC,UAAQ,IAC1EP,EAAAC,EAAAd,cAAA,WACAa,EAAAC,EAAAd,cAAA,SACIgB,GAAG,MACHC,KAAK,OACLI,UAAU,IACVC,UAAU,IACVJ,KAAK,KACLC,YAAY,MACZC,UAAQ,IAEZP,EAAAC,EAAAd,cAAA,SACIgB,GAAG,MACHC,KAAK,OACLI,UAAU,IACVC,UAAU,IACVJ,KAAK,KACLC,YAAY,MACZC,UAAQ,KAGhBP,EAAAC,EAAAd,cAAA,WACAa,EAAAC,EAAAd,cAAA,UAAQuB,QAAS,kBAAM7B,MAAvB,UACAmB,EAAAC,EAAAd,cAAA,SAAOgB,GAAG,SAASC,KAAK,OAAOC,KAAK,KAAKC,YAAY,WACrDN,EAAAC,EAAAd,cAAA,OAAKgB,GAAG,iBClEJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjB,EAAAC,EAAAd,cAAC+B,EAAD,MAASnC,SAASC,eAAe,SDmH3C,kBAAmBmC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63bda85e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Componentm, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n    const [link, setLink] = useState('');\n    const [min, setMin] = useState('');\n    const [sec, setSec] = useState('');\n\n    function onSubmit() {\n        let originallink = document.getElementById('originallink');\n        let min = document.getElementById('min');\n        let sec = document.getElementById('sec');\n        let result = originallink + '?t=' + (60 * min + sec);\n        result.select();\n        document.execCommand('Copy');\n    }\n    function copyToClipboard() {\n        let originallink = document.getElementById('originallink').value;\n        let min = document.getElementById('min').value;\n        let sec = document.getElementById('sec').value;\n        let result = originallink + '?t=' + (60 * min + 1 * sec);\n        let t = document.createElement('textarea');\n        document.body.appendChild(t);\n        t.value = result;\n        t.select();\n        document.execCommand('copy');\n        document.getElementById('result').value = result;\n        document.body.removeChild(t);\n\t\tdocument.getElementById('thumbnail').src = 'https://i.ytimg.com/vi/'+ getThumbnailCode() +'/maxresdefault.jpg'\n    }\n    // https://i.ytimg.com/vi/M03hNLFsRKY/maxresdefault.jpg\n\t// https://www.youtube.com/watch?v=8Wtvn2LBQHM&feature=youtu.be\n\t// https://youtu.be/8Wtvn2LBQHM\n\t\n\tfunction getThumbnailCode() {\n        let originallink = document.getElementById('originallink').value;\n\t\tif (originallink.slice(8,16) == 'youtu.be' ) {\n\t\t\treturn originallink.slice(17)\n\t\t}\n\t\tif ( originallink.slice(8,23) == 'www.youtube.com' ) {\n\t\t\tlet start = originallink.indexOf('v=')+2\n\t\t\tlet end = originallink.indexOf('&')\n\t\t\treturn originallink.slice(start,end)\n\t\t}\n\t}\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Youtube specific time URL Generator</h1>\n                <div className=\"main\">\n                    <input id=\"originallink\" type=\"text\" size=\"30\" placeholder=\"link\" required />\n                    <br />\n                    <input\n                        id=\"min\"\n                        type=\"text\"\n                        minLength=\"1\"\n                        maxLength=\"4\"\n                        size=\"14\"\n                        placeholder=\"min\"\n                        required\n                    />\n                    <input\n                        id=\"sec\"\n                        type=\"text\"\n                        minLength=\"1\"\n                        maxLength=\"2\"\n                        size=\"14\"\n                        placeholder=\"sec\"\n                        required\n                    />\n                </div>\n                <br />\n                <button onClick={() => copyToClipboard()}>submit</button>\n                <input id=\"result\" type=\"text\" size=\"30\" placeholder=\"result\" />\n                <img id=\"thumbnail\"></img>\n            </header>\n        </div>\n    );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}